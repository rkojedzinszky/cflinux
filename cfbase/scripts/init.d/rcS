#!/bin/sh

# make sure the shell won't exit on any error
set +e

# invoking ldconfig
/sbin/ldconfig

# Mounting all filesystems
echo -n "Mounting filesystems: "
mount -a
echo "done"

echo -n "Mounting /dev/pts: "
mount devpts /dev/pts -t devpts
echo "done"

echo -n "Creating /var structure: "
mkdir /var/lock /var/run /var/lib /var/tmp /var/log /var/empty
chmod 1777 /var/tmp
echo -n "" > /var/log/lastlog
echo -n "" > /var/log/wtmp
echo -n "" > /var/run/utmp
ln -s /usr/local/var/db /var/
echo "done"

# save the __system_device file
umask 0227
echo "$__system_device" > /var/run/__system_device
umask 0022

# processing modules
modules_file="/etc/modules"
[ -f "$modules_file" ] || modules_file="/usr/share/defaults/etc/modules"
if [ -f "$modules_file" ]
then
    echo "Loading modules"
    sed 's/#.*$//g' "$modules_file" | grep "[^[:space:]]" | while read mod options
    do
	modprobe "$mod" $options
    done
fi

# Saving dmesg
dmesg > /var/log/dmesg

# read system wide defaults
. /usr/share/defaults/etc/rc.conf

# if available, read local configuration
[ -r /etc/rc.conf ] && . /etc/rc.conf

if [ -n "$hostname" ]; then
	echo "Setting hostname: $hostname."
	hostname "$hostname"
fi

if ! grep -q "^nogroup:" /etc/group ; then
	echo -n "Adding system group nogroup:"
	addgroup -g 65534 nogroup
	echo " done"
fi

if ! grep -q "^nobody:" /etc/passwd ; then
	echo -n "Adding system user nobody:"
	adduser -DH -h /var/run -g "Nobody" -s /bin/false -G nogroup nobody
	echo " done"
fi

case "$farsync_init" in
	[Yy][Ee][Ss])
		export farsync_media
		export farsync_proto
		/usr/share/farsync/farsync.init
		;;
esac

if [ -r /etc/rc.network ]; then
	echo -n "Network initialization: "
	sh /etc/rc.network
	echo "done"
fi

case "$tcp_blackhole" in
	[Yy][Ee][Ss])
		echo 1 > /proc/sys/net/ipv4/tcp_blackhole
		;;
esac
case "$udp_blackhole" in
	[Yy][Ee][Ss])
		echo 1 > /proc/sys/net/ipv4/udp_blackhole
		;;
esac
case "$syncookies_enable" in
	[Yy][Ee][Ss])
		echo -n "Enabling TCP/IP SYN cookies: "
		echo 1 > /proc/sys/net/ipv4/tcp_syncookies
		echo "done."
		;;
esac
case "$ecn_enable" in
	[Yy][Ee][Ss])
		echo -n "Enabling ECN: "
		echo 1 > /proc/sys/net/ipv4/tcp_ecn
		echo "done."
		;;
esac
case "$spoofprotect_enable" in
	[Yy][Ee][Ss])
		if [ -e /proc/sys/net/ipv4/conf/all/rp_filter ]; then
			echo -n "Enabling spoof protection on all interfaces: "
			for i in /proc/sys/net/ipv4/conf/*/rp_filter ; do
				echo 1 > $i
			done
			echo "done."
		fi
		;;
esac
if [ -f /proc/sys/net/ipv4/conf/all/arp_announce -a "$arp_announce" -gt 0 ]; then
	echo -n "Setting default ARP announce method($arp_announce) on all interfaces:"
	echo "$arp_announce" > /proc/sys/net/ipv4/conf/all/arp_announce
	echo " done."
fi
case "$console_blank" in
	[Nn][Oo])
		console_blank=0
		;;
	[0-9]|[0-9][0-9]|[0-9][0-9][0-9]|[0-9][0-9][0-9][0-9])
	# a bit hackish, but I had no other idea how to match numbers
		;;
	*)
		console_blank=10
		;;
esac
if [ $console_blank -eq 0 ]; then
	echo -n "Disabling console blanking:"
else
	echo -n "Enabling console blanking ($console_blank minutes):"
fi
echo -ne "\033[9;$console_blank]" > /dev/tty1 2>/dev/null
echo " done"

echo -n "Starting standard daemons:"
case "$syslogd_enable" in
	[Yy][Ee][Ss])
		/sbin/syslogd $syslogd_flags
		echo -n " syslogd"
		;;
esac
case "$klogd_enable" in
	[Yy][Ee][Ss])
		/sbin/klogd
		echo -n " klogd"
		;;
esac
case "$inetd_enable" in
	[Yy][Ee][Ss])
		/usr/sbin/inetd $inetd_flags
		echo -n " inetd"
		;;
esac
case "$crond_enable" in
	[Yy][Ee][Ss])
		/usr/sbin/crond $crond_flags
		echo -n " crond"
		;;
esac
case "$cardmgr_enable" in
	[Yy][Ee][Ss])
		/sbin/cardmgr $cardmgr_flags && echo -n " cardmgr"
		;;
esac
case "$sshd_enable" in
	[Yy][Ee][Ss])
		for i in rsa dsa ; do
			if ! [ -f /etc/ssh/ssh_host_${i}_key ]; then
				echo -n " [generating 2048 bits $i key"
				ssh-keygen -t $i -b 2048 -N "" \
				-f /etc/ssh/ssh_host_${i}_key >/dev/null 2>&1
				echo -n "]"
			fi
		done
		/usr/sbin/sshd $sshd_flags
		echo -n " sshd"
		;;
esac

if [ ! -d /var/quagga ]; then
	mkdir /var/quagga
	chown quagga:quagga /var/quagga
fi
case "$zebra_enable" in
	[Yy][Ee][Ss])
		[ -r /etc/zebra/zebra.conf ] && \
			/usr/sbin/zebra -d $zebra_flags && echo -n " zebra"
		;;
esac
case "$ospfd_enable" in
	[Yy][Ee][Ss])
		[ -r /etc/zebra/ospfd.conf ] && \
			/usr/sbin/ospfd -d $ospfd_flags && echo -n " ospfd"
		;;
esac
case "$ripd_enable" in
	[Yy][Ee][Ss])
		[ -r /etc/zebra/ripd.conf ] && \
			/usr/sbin/ripd -d $ripd_flags && echo -n " ripd"
		;;
esac
case "$bgpd_enable" in
	[Yy][Ee][Ss])
		[ -r /etc/zebra/bgpd.conf ] && \
			/usr/sbin/bgpd -d $ripd_flags && echo -n " bgpd"
		;;
esac
case "$httpd_enable" in
	[Yy][Ee][Ss])
		/usr/sbin/httpd $httpd_flags && echo -n " httpd"
		;;
esac
case "$snmpd_enable" in
	[Yy][Ee][Ss])
		if ! grep -q "^snmpd:" /etc/passwd ; then
			echo -n " [adding user snmpd"
			adduser -h /var/lib/net-snmp -g "SNMP daemon user" -s /bin/false -D -H snmpd && echo -n "]"
		fi
		if [ ! -d /var/lib/net-snmp ]; then
			mkdir /var/lib/net-snmp
			chown snmpd:snmpd /var/lib/net-snmp
		fi
		/usr/sbin/snmpd $snmpd_flags && echo -n " snmpd"
		;;
esac
echo "."

echo -n "Local initialization: "
for rcdir in $rc_dirs; do
	if [ -d "$rcdir" ]; then
		run-parts "$rcdir"
	fi
done
echo "."

echo -e "\n"
