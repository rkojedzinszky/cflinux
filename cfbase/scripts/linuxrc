#!/bin/sh

# This script is intended to run very first on the system
# to mount /etc, after it is done it invokes /sbin/init.
# With this, one can edit his own /etc/inittab file.
# And also to the system it is transparent that /etc is not
# on the root filesystem

# Make sure the shell does not exit on any error
set +e

# set the default path
export PATH=/bin:/sbin:/usr/bin:/usr/sbin

# try to guess the real system device
# if it is set through the kernel command line, accept that
if [ -z "$__system_device" ]; then
	# else try to guess it
	mount -n proc -t proc /proc
	if [ $? -ne 0 ]; then
		echo "Unable to mount proc, this is a big-big problem!"
		echo "Starting an emergency shell anyway..."
		exec /bin/sh
	fi
	if [ -f /proc/cmdline ]; then
		__system_device=$(sed -n \
			's/^.*root=\([\/a-zA-Z]\+\)[0-9].*$/\1/p' /proc/cmdline)
	else
		echo "/proc/cmdline does not exist. Why???"
		echo "Starting an emergency shell anyway..."
		exec /bin/sh
	fi
	umount -n /proc >/dev/null 2>&1
fi
if [ -z "$__system_device" ]; then
	# if it is still undefined, set it to the default /dev/hdc
	__system_device="/dev/hdc"
fi

# upgrade config
__system_device="$__system_device" /usr/lib/cfmaint/upgrade_config

# create /etc
mount tmpfs -nt tmpfs -o size=16M,mode=0755 /etc
e2fsck -p "${__system_device}1" 2>/dev/null
echo -n "Reading configuration: "
. /usr/lib/cfmaint/common.sh
mount -nt ext2 -o ro -n "${__system_device}1" $config_part
idx=`get_last_valid_idx`
if [ -z "$idx" ] ; then
	echo "no valid configuration found, using builtin defaults"
	tar xf /usr/share/defaults/etc.tar -C /etc
	sed -e "s#@DEV@#$__system_device#g" /usr/share/defaults/etc/fstab.template > /etc/fstab
else
	echo "found at idx=$idx"
	tar xzf $config_part/$config_prefix.$idx -C /
fi
umount $config_part

# Make /etc/mtab to be a symlink to /proc/mounts
ln -sf /proc/mounts /etc/mtab

# Invoke /sbin/init
export __system_device
exec /sbin/init

# vim: ts=2 sw=2
