--- net-snmp-5.2.3.orig/agent/mibgroup/ucd-snmp/vmstat.c	2006-04-13 20:21:50.000000000 +0200
+++ net-snmp-5.2.3/agent/mibgroup/ucd-snmp/vmstat.c	2006-11-21 10:32:19.000000000 +0100
@@ -120,6 +120,7 @@
 #define STAT_FILE	"/proc/stat"
 #define VMSTAT_FILE	"/proc/vmstat"
 
+static void update_cpustat();
 
 void
 init_vmstat(void)
@@ -187,8 +188,10 @@
      */
     REGISTER_MIB("ucd-snmp/vmstat", extensible_vmstat_variables, variable2,
                  vmstat_variables_oid);
-}
 
+    /* register an snmp timeout */
+    snmp_alarm_register(60, SA_REPEAT, update_cpustat, NULL);
+}
 
 static void
 getstat(unsigned long *cuse, unsigned long *cice, unsigned long *csys,
@@ -363,44 +366,73 @@
     rawinterrupts, rawcontext
 };
 
+static struct cpustat {
+	unsigned long	cpu_use, cpu_nic, cpu_sys, cpu_idl;
+	unsigned	pgpgin, pgpgout, pswpin, pswpout,
+			inter, ticks, ctxt;
+	unsigned long	cpu_wait, cpu_irq, cpu_softirq;
+} cpustats[2];
+
+static void update_cpustat()
+{
+	struct cpustat _cpustat;
+
+	getstat(&_cpustat.cpu_use, &_cpustat.cpu_nic, &_cpustat.cpu_sys, &_cpustat.cpu_idl,
+			&_cpustat.pgpgin, &_cpustat.pgpgout, &_cpustat.pswpin, &_cpustat.pswpout,
+			&_cpustat.inter, &_cpustat.ticks, &_cpustat.ctxt,
+			&_cpustat.cpu_wait, &_cpustat.cpu_irq, &_cpustat.cpu_softirq);
+#define DIFF(var)	cpustats[0].var = _cpustat.var - cpustats[1].var; cpustats[1].var = _cpustat.var
+	DIFF(cpu_use);
+	DIFF(cpu_nic);
+	DIFF(cpu_sys);
+	DIFF(cpu_idl);
+	DIFF(pgpgin);
+	DIFF(pgpgout);
+	DIFF(pswpin);
+	DIFF(pswpout);
+	DIFF(inter);
+	DIFF(ticks);
+	DIFF(ctxt);
+	DIFF(cpu_wait);
+	DIFF(cpu_irq);
+	DIFF(cpu_softirq);
+#undef DIFF
+}
+
 static unsigned
 vmstat(int iindex)
 {
-    unsigned long   cpu_use, cpu_nic, cpu_sys, cpu_idl;
     double          duse, dsys, didl, ddiv, divo2;
     double          druse, drnic, drsys, dridl;
-    unsigned int    pgpgin, pgpgout, pswpin, pswpout;
-    unsigned int    inter, ticks, ctxt;
-    unsigned long   cpu_wait, cpu_irq, cpu_softirq;
     unsigned int    hertz;
 
-    getstat(&cpu_use, &cpu_nic, &cpu_sys, &cpu_idl,
-            &pgpgin, &pgpgout, &pswpin, &pswpout, &inter, &ticks, &ctxt,
-	    &cpu_wait, &cpu_irq, &cpu_softirq);
-    duse = cpu_use + cpu_nic;
-    dsys = cpu_sys;
-    didl = cpu_idl;
+    duse = cpustats[0].cpu_use + cpustats[0].cpu_nic;
+    dsys = cpustats[0].cpu_sys + cpustats[0].cpu_wait + cpustats[0].cpu_irq + cpustats[0].cpu_softirq;
+    didl = cpustats[0].cpu_idl;
     ddiv = duse + dsys + didl;
     hertz = sysconf(_SC_CLK_TCK);  /* get ticks/s from system */
     divo2 = ddiv / 2;
-    druse = cpu_use;
-    drnic = cpu_nic;
-    drsys = cpu_sys;
-    dridl = cpu_idl;
+    druse = cpustats[0].cpu_use;
+    drnic = cpustats[0].cpu_nic;
+    drsys = cpustats[0].cpu_sys;
+    dridl = cpustats[0].cpu_idl;
+
+    if (ddiv == 0)
+	    ddiv = 1;
 
     switch (iindex) {
     case swapin:
-        return (pswpin  * 4 * hertz + divo2) / ddiv;
+        return (cpustats[0].pswpin  * 4 * hertz + divo2) / ddiv;
     case swapout:
-        return (pswpout * 4 * hertz + divo2) / ddiv;
+        return (cpustats[0].pswpout * 4 * hertz + divo2) / ddiv;
     case iosent:
-        return (pgpgin      * hertz + divo2) / ddiv;
+        return (cpustats[0].pgpgin      * hertz + divo2) / ddiv;
     case ioreceive:
-        return (pgpgout     * hertz + divo2) / ddiv;
+        return (cpustats[0].pgpgout     * hertz + divo2) / ddiv;
     case sysinterrupts:
-        return (inter       * hertz + divo2) / ddiv;
+        return (cpustats[0].inter       * hertz + divo2) / ddiv;
     case syscontext:
-        return (ctxt        * hertz + divo2) / ddiv;
+        return (cpustats[0].ctxt        * hertz + divo2) / ddiv;
     case cpuuser:
         return (100 * duse / ddiv);
     case cpusystem:
@@ -416,23 +448,23 @@
     case cpurawidle:
         return dridl;
     case rawinterrupts:
-	return inter;
+	return cpustats[0].inter;
     case rawcontext:
-	return ctxt;
+	return cpustats[0].ctxt;
     case cpurawwait:
-	return cpu_wait;
+	return cpustats[0].cpu_wait;
     case cpurawinter:
-	return cpu_irq;
+	return cpustats[0].cpu_irq;
     case cpurawsoft:
-	return cpu_softirq;
+	return cpustats[0].cpu_softirq;
     case rawiosent:
-	return pgpgout*2;
+	return cpustats[0].pgpgout*2;
     case rawioreceive:
-	return pgpgin*2;
+	return cpustats[0].pgpgin*2;
     case rawswapin:
-	return pswpin;
+	return cpustats[0].pswpin;
     case rawswapout:
-	return pswpout;
+	return cpustats[0].pswpout;
     default:
         return -1;
     }
