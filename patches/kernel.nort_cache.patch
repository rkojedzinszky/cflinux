commit d840eb9907b27af4dd5e23b7c9aa4f0e744c4f96
Author: Richard Kojedzinszky <krichy@tvnetwork.hu>
Date:   Thu Aug 21 12:59:33 2008 +0200

    CONFIG_IP_NORT_CACHE option added.

diff --git a/net/ipv4/Kconfig b/net/ipv4/Kconfig
index 4670683..f31a6cb 100644
--- a/net/ipv4/Kconfig
+++ b/net/ipv4/Kconfig
@@ -51,6 +51,12 @@ config IP_ADVANCED_ROUTER
 
 	  If unsure, say N here.
 
+config IP_NORT_CACHE
+	bool "Disable route-cache"
+	depends on IP_ADVANCED_ROUTER
+	---help---
+	Choose this if you want to disable the kernel's route-cache.
+
 choice 
 	prompt "Choose IP: FIB lookup algorithm (choose FIB_HASH if unsure)"
 	depends on IP_ADVANCED_ROUTER
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index 96be336..c5322ba 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -259,6 +259,12 @@ static DEFINE_PER_CPU(struct rt_cache_stat, rt_cache_stat);
 #define RT_CACHE_STAT_INC(field) \
 	(__raw_get_cpu_var(rt_cache_stat).field++)
 
+#ifdef CONFIG_IP_NORT_CACHE
+static inline unsigned int rt_hash(__be32 daddr, __be32 saddr, int idx)
+{
+	return 0;
+}
+#else
 static inline unsigned int rt_hash(__be32 daddr, __be32 saddr, int idx)
 {
 	return jhash_3words((__force u32)(__be32)(daddr),
@@ -266,6 +272,7 @@ static inline unsigned int rt_hash(__be32 daddr, __be32 saddr, int idx)
 			    idx, atomic_read(&rt_genid))
 		& rt_hash_mask;
 }
+#endif /* CONFIG_IP_NORT_CACHE */
 
 #ifdef CONFIG_PROC_FS
 struct rt_cache_iter_state {
@@ -944,6 +951,23 @@ work_done:
 out:	return 0;
 }
 
+#ifdef CONFIG_IP_NORT_CACHE
+static inline int rt_intern_hash(unsigned hash, struct rtable *rt, struct rtable **rp)
+{
+	int err;
+
+	err = arp_bind_neighbour(&rt->u.dst);
+	if (err) {
+		rt_drop(rt);
+		return err;
+	}
+
+	rt_free(rt);
+	*rp = rt;
+
+	return 0;
+}
+#else
 static int rt_intern_hash(unsigned hash, struct rtable *rt, struct rtable **rp)
 {
 	struct rtable	*rth, **rthp;
@@ -1072,6 +1096,7 @@ restart:
 	*rp = rt;
 	return 0;
 }
+#endif /* CONFIG_IP_NORT_CACHE */
 
 void rt_bind_peer(struct rtable *rt, int create)
 {
@@ -2072,6 +2097,7 @@ martian_source:
 int ip_route_input(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 		   u8 tos, struct net_device *dev)
 {
+#ifndef CONFIG_IP_NORT_CACHE
 	struct rtable * rth;
 	unsigned	hash;
 	int iif = dev->ifindex;
@@ -2101,6 +2127,7 @@ int ip_route_input(struct sk_buff *skb, __be32 daddr, __be32 saddr,
 		RT_CACHE_STAT_INC(in_hlist_search);
 	}
 	rcu_read_unlock();
+#endif
 
 	/* Multicast recognition logic is moved from route cache to here.
 	   The problem was that too many Ethernet cards have broken/missing
